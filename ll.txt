    {/* categories */}
            {/* <div className="py-8">
              <label htmlFor="category">Category</label>

              <div className="w-full py-4 border rounded-md justify-between flex items-center px-4  border-gray-300">
                <label htmlFor="category" className="text-[gray]">
                  Select
                </label>
                <div
                  ref={dropdownRef}
                  className="relative inline-block text-left "
                >
                  <div>
                    <span className="rounded-md shadow-sm">
                      <button
                        type="button"
                        onClick={() => setIsOpen(!isOpen)}
                        className="inline-flex justify-center w-full rounded-md  px-4 py-2 bg-white text-sm font-medium text-gray-700 focus:outline-none focus:border-blue-300 focus:ring focus:ring-blue-200 active:bg-gray-50 active:text-gray-800"
                        id="options-menu"
                        aria-haspopup="true"
                        aria-expanded={isOpen ? "true" : "false"}
                      >
                        <Image
                          height={20}
                          width={20}
                          src="https://res.cloudinary.com/dcb4ilgmr/image/upload/v1708133810/utilities/fi_chevron-down_yid0fo.svg"
                          alt="rice"
                          className="rounded-lg"
                        />{" "}
                      </button>
                    </span>
                  </div>
                  {isOpen && (
                    <div
                      className="origin-top-right absolute z-10 right-0 mt-6 w-[500px] rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5"
                      role="menu"
                      aria-orientation="vertical"
                      aria-labelledby="options-menu"
                    >
                      <div className="py-1" role="none">
                        {categories.map((category) => (
                          <label
                            key={category}
                            className="flex items-center py-2 px-4"
                          >
                            <input
                              type="checkbox"
                              className="form-checkbox h-5 w-5 text-blue-600"
                              checked={selectedCategories.includes(category)}
                              onChange={() =>
                                handleCategoriesChange([category])
                              }
                            />
                            <span className="ml-2 text-sm text-gray-700">
                              {category}
                            </span>
                          </label>
                        ))}
                      </div>
                    </div>
                  )}
                </div>
              </div>
            </div> */}
            const categories = [
            "AI",
            "Fintech",
            "Marketplace",
            "E-commerce",
            "Crypto & Web 3",
            "Software & SaaS",
            "Travel & Hospitality",
            "Agency & Corporate",
          ];
          const pageTypes = [
            "Landing page",
            "Pricing page",
            "About page",
            "Login page",
            "Sign up page",
            "404 page",
          ];

            // const { resources: sneakers } = await cloudinary.api.resources_by_tag(
  //   "nextjs-server-actions-upload-sneakers",
  //   { context: true }
  // );

    // const handleCategoryChange = (category: string) => {
  //   if (selectedCategories.includes(category)) {
  //     setSelectedCategories(selectedCategories.filter((c) => c !== category));
  //   } else {
  //     setSelectedCategories([...selectedCategories, category]);
  //   }
  // };

     // Iterate over all file types and append them to FormData for Cloudinary
    const fileTypes = [
      "logoImageURL",
      "desktopSsURL",
      "mobileSsURL",
      "desktopFpURL",
      "mobileFpURL",
    ];
  


    // fileTypes.forEach((fieldName) => {
    //   const files = formData[fieldName];
    //   console.log("file names", files)
    //   if (files) {
    //     if (Array.isArray(files)) {
    //       // If multiple files are selected for the field
    //       files.forEach((file) => {
    //         console.log("file name", file)
    //         formDataForCloudinary.append("file", file);
    //       });
    //     } else {
    //       // If only one file is selected for the field
    //       formDataForCloudinary.append("file", files);
    //     }
    //     // Clear the URL after upload to avoid redundant uploads
    //     formDataForSupabase[fieldName] = "";
    //   }
    // });

      const handlePageTypeChange1 = (pageType: string) => {
    if (selectedPageTypes1.includes(pageType)) {
      setSelectedPageTypes1(
        selectedPageTypes1.filter((type) => type !== pageType)
      );
    } else {
      setSelectedPageTypes1([...selectedPageTypes1, pageType]);
    }
  };


  const handleChangeCategories = (selectedOption: Option) => {
    setFormData({ ...formData, categories: selectedOption.value });
    setCategoryOption(categoryOption);
  };



  /**
   * handleCategoryChange
   * @description Triggers when the category selection changes
   * @param category - Array of strings representing the selected categories
   */

  const handleCategoriesChange = (category: string[]) => {
    // Check if the category array contains any elements
    if (category.length === 0) return;

    // Check if the first category in the array is already selected
    if (selectedCategories.includes(category[0])) {
      // Remove all categories present in the category array from selectedCategories
      setSelectedCategories(
        selectedCategories.filter((c) => !category.includes(c))
      );
    } else {
      // Add all categories in the category array to selectedCategories
      setSelectedCategories([...selectedCategories, ...category]);
      // Update formData with the new category
      setFormData({
        ...formData,
        categories: [...(formData.categories as string[]), ...category],
      });
    }
  };

    const handleFileChanges = (event: React.ChangeEvent<HTMLInputElement>) => {
    if (event.target.files) {
      setFile(event.target.files[0]);
    }
  };

  const handleUpload = async () => {
    if (!file) return;

    const formData = new FormData();
    formData.append("file", file);

    try {
      const response = await fetch("/api/upload", {
        method: "POST",
        body: formData,
      });

      if (response.ok) {
        const data = await response.json();
        console.log("Image uploaded:", data.imageUrl);
        // Handle the Cloudinary URL as needed (e.g., display the image)
      } else {
        console.error("Failed to upload image:", response.statusText);
      }
    } catch (error) {
      console.error("Error uploading image:", error);
    }
  };
   {/* <div className="w-full py-8">
              <label htmlFor="pageType">Page type</label>
              <div className="w-full py-4 border rounded-md justify-between flex items-center px-4  border-gray-300">
                <label htmlFor="pageType" className="text-[gray]">
                  Select
                </label>
                <div
                  ref={dropdownRef}
                  className="relative inline-block text-left "
                >
                  <div className="relative inline-block text-left">
                    <div>
                      <span className="rounded-md shadow-sm">
                        <button
                          type="button"
                          onClick={() => setIsOpen1(!isOpen1)}
                          className="inline-flex justify-center w-full rounded-md  px-4 py-2 bg-white text-sm font-medium text-gray-700 focus:outline-none focus:border-blue-300 focus:ring focus:ring-blue-200 active:bg-gray-50 active:text-gray-800"
                          id="options-menu"
                          aria-haspopup="true"
                          aria-expanded={isOpen ? "true" : "false"}
                        >
                          <Image
                            height={20}
                            width={20}
                            src="https://res.cloudinary.com/dcb4ilgmr/image/upload/v1708133810/utilities/fi_chevron-down_yid0fo.svg"
                            alt="rice"
                            className="rounded-lg"
                          />{" "}
                        </button>
                      </span>
                    </div>
                    {isOpen1 && (
                      <div
                        className="origin-top-right absolute right-0 mt-6 w-[500px] rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5"
                        role="menu"
                        aria-orientation="vertical"
                        aria-labelledby="options-menu"
                      >
                        <div className="py-1" role="none">
                          {pageTypes.map((pageType) => (
                            <label
                              key={pageType}
                              className="flex items-center py-2 px-4"
                            >
                              <input
                                type="checkbox"
                                className="form-checkbox h-5 w-5 text-blue-600"
                                checked={selectedPageTypes1.includes(pageType)}
                                onChange={() => handlePageTypeChange1(pageType)}
                              />
                              <span className="ml-2 text-sm text-gray-700">
                                {pageType}
                              </span>
                            </label>
                          ))}
                        </div>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            </div> */}

            if (selectedOption) {
      setFormData({ ...formData, pageType: selectedOption.value });
      setSelectedOption(selectedOption);
    }